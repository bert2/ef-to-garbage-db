// <auto-generated />
using GarbageDb;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GarbageDb.Migrations
{
    [DbContext(typeof(BloggingContext))]
    partial class BloggingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028");

            modelBuilder.Entity("GarbageDb.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Pid");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("M_Blogs");
                });

            modelBuilder.Entity("GarbageDb.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Pid");

                    b.Property<string>("Message");

                    b.Property<int>("PostId")
                        .HasColumnName("PostXid");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("M_Comments");
                });

            modelBuilder.Entity("GarbageDb.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Pid");

                    b.Property<int>("BlogId")
                        .HasColumnName("BlogXid");

                    b.Property<string>("Content");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("M_Posts");
                });

            modelBuilder.Entity("GarbageDb.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Pid");

                    b.Property<int>("PostId")
                        .HasColumnName("PostXid");

                    b.Property<char>("Type");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("M_Reviews");

                    b.HasDiscriminator<char>("Type");
                });

            modelBuilder.Entity("GarbageDb.NegativeReview", b =>
                {
                    b.HasBaseType("GarbageDb.Review");

                    b.HasDiscriminator().HasValue('N');
                });

            modelBuilder.Entity("GarbageDb.PositiveReview", b =>
                {
                    b.HasBaseType("GarbageDb.Review");

                    b.HasDiscriminator().HasValue('P');
                });

            modelBuilder.Entity("GarbageDb.Comment", b =>
                {
                    b.HasOne("GarbageDb.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GarbageDb.Post", b =>
                {
                    b.HasOne("GarbageDb.Blog", "Blog")
                        .WithMany("Posts")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GarbageDb.Review", b =>
                {
                    b.HasOne("GarbageDb.Post", "Post")
                        .WithMany("Reviews")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
